#![no_std] // Не используем стандартную библиотеку, а значит никаких стандартных библиотек операционной системы
#![no_main] // Отключаем стандартную точку входа main Rust, которая вызывыется из библиотеки crt после инициализации запуска

use core::{
    panic::{
        PanicInfo
    }
};

// Данная функция будет вызываться в случае паники
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {
    }
}

// Данная функция является точкой входа нашей операционки, поэтому имя _start
// Не занимаемся манглингом функции, экспортируем как есть имя
// Данная функция не должна возвращать никакой результат и никогда не должны выходить из нее
//      поэтому возвращается !
#[no_mangle]
pub extern "C" fn _start() -> ! {
    // Наша выводимая строка
    static HELLO: &[u8] = b"Hello World!";

    // Буффер для вывода на экран расположен по фиксированному адресу
    let vga_buffer = 0xb8000 as *mut u8;

    for (i, &byte) in HELLO.iter().enumerate() {
        unsafe {
            // Записываем непосредственно байт куда надо со смещением в 2 байта
            *vga_buffer.offset(i as isize * 2) = byte;
            // Записываем цвет следующим байтом
            *vga_buffer.offset(i as isize * 2 + 1) = 0xb;
        }
    }

    loop {
    }
}